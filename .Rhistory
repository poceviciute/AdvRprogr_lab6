greedy_heuristic(x = knapsack_objects[1:800], w = 3500)
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
i <-1
selected_elements[j] <- x[j, "element"]
selected_elements
j <- 1
selected_elements[j] <- x[j, "element"]
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
for(i in 1:nrow(x)){
while(sum_weight <= w){
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[j] <- x[i, "element"]
}
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
selected_elements[i] <- x[i, "element"]
x[i, "element"]
x[2, "element"]
x[800, "element"]
selected_elements[i]
set.seed(42)
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
library(dplyr)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
for(i in 1:nrow(x)){
while(sum_weight <= w){
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
}
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
for(i in 1:nrow(x)){
while(sum_weight <= w){
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
print(selected_elements)
}
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
nrow(x)
x <- knapsack_objects[1:800, ]
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
nrow(x)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
for(i in 1:nrow(x)){
print(i)
while(sum_weight <= w){
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
}
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
for(i in 1:nrow(x)){
while(sum_weight <= w){
print(i)
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
}
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
for(i in 1:nrow(x)){
while(sum_weight <= w){
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
}
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
for(i in 1:nrow(x)){
while(sum_weight <= w){
print(i)
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
}
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
for(i in 1:10){
while(sum_weight <= w){
print(i)
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
}
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
View(x)
nrow(x)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
for(i in c(3,6,4)){
while(sum_weight <= w){
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
}
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
for(i in c(3,6,4)){
while(sum_weight <= w){
print(i)
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
}
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
i <- 1
while(sum_weight <= w){
i <- i + 1
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
i <- 1
while (sum_weight <= w) {
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
i <- i + 1
}
return(list(value = sum_value,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
i <- 1
while (sum_weight <= w) {
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
i <- i + 1
}
return(list(value = sum_value,
sum_weight = sum_weight,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
selected_elements <- vector()
i <- 1
while (weight_check <= w) {
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
weight_check <- sum_weight + x[i + 1, "w"]
i <- i + 1
}
return(list(value = sum_value,
sum_weight = sum_weight,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
weight_check <- 0
selected_elements <- vector()
i <- 1
while (weight_check <= w) {
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
weight_check <- sum_weight + x[i + 1, "w"]
i <- i + 1
}
return(list(value = sum_value,
sum_weight = sum_weight,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic <- function(x = knapsack_objects, w){
stopifnot(is.numeric(w))
x <- x %>%
mutate(element = seq_along((x[[1]])),
density = v/w) %>%
arrange(desc(density))
# Start values
sum_weight <- 0
sum_value <- 0
weight_check <- 0
selected_elements <- vector()
i <- 1
while (weight_check <= w) {
sum_weight <- sum_weight + x[i, "w"]
sum_value <- sum_value + x[i, "v"]
selected_elements[i] <- x[i, "element"]
weight_check <- sum_weight + x[i + 1, "w"]
i <- i + 1
}
return(list(value = round(sum_value, 0),
sum_weight = sum_weight,
selected_elements = selected_elements))
}
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic(x = knapsack_objects[1:1200, ], w = 3500)
greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500)
greedy_heuristic(x = knapsack_objects[1:1200, ], w = 2000)
system.time(greedy_heuristic(x = knapsack_objects[1:800, ], w = 3500))
system.time(greedy_heuristic(x = knapsack_objects[1:1200, ], w = 2000))
install.packages("microbenchmarking")
devtools::use_vignette("lab report knapsack")
greedy_heuristic_time <- system.time(greedy_heuristic(x = knapsack_objects[1:1200, ], w = 2000))
greedy_heuristic_time
gh_time <- system.time(greedy_heuristic(x = knapsack_objects[1:1200, ], w = 2000))
answer_gh<- greedy_heuristic_time[1] * 1000000
print(answer_gh)
n_gh <- 1000000
answer_gh2 <-end-start
start <- Sys.time()
greedy_heuristic(x = knapsack_objects[1:1000, ], w = 2000)
end <- Sys.time()
answer_gh2 <-end-start
answer_gh2
answer_gh <- gh_time * (n_gh/1000)
print(answer_gh)
n_gh <- 1000000
gh_time <- system.time(greedy_heuristic(x = knapsack_objects[1:1000, ], w = 2000))
start <- Sys.time()
greedy_heuristic(x = knapsack_objects[1:1000, ], w = 2000)
end <- Sys.time()
gh_time2 <-end-start
answer_gh <- gh_time[1] * (n_gh/1000)
answer_gh <- gh_time * (n_gh/1000)
print(answer_gh)
print(answer_gh)
gh_time * (n_gh/1000)
answer_gh
answer_gh <- gh_time2 * (n_gh/1000)
print(answer_gh)
answer_gh
library(dplyr)
set.seed(42)
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
devtools::use_testthat()
context("brute_force_knapsack")
set.seed(42)
n <- 2000
knapsack_objects <- data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
test_that("Correct object is returned", {
expect_silent(bfk <- brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500))
expect_named(bfk, c("value", "elements"))
})
test_that("functions rejects errounous input.", {
expect_error(brute_force_knapsack("hej", 3500))
expect_error(brute_force_knapsack(x = knapsack_objects[1:8,], W = -3500))
})
test_that("Function return correct results.", {
bfk <- brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
expect_equal(round(bfk$value), 16770)
expect_true(all(round(bfk$elements) %in% c(5, 8)))
bfk <- brute_force_knapsack(x = knapsack_objects[1:12,], W = 3500)
expect_equal(round(bfk$value), 16770)
expect_true(all(round(bfk$elements) %in% c(5, 8)))
bfk <- brute_force_knapsack(x = knapsack_objects[1:8,], W = 2000)
expect_equal(round(bfk$value), 15428)
expect_true(all(round(bfk$elements) %in% c(3, 8)))
bfk <- brute_force_knapsack(x = knapsack_objects[1:12,], W = 2000)
expect_equal(round(bfk$value), 15428)
expect_true(all(round(bfk$elements) %in% c(3, 8)))
st <- system.time(bfk <- brute_force_knapsack(x = knapsack_objects[1:16,], W = 2000))
expect_true(as.numeric(st)[2] > 0.00)
})
devtools::test()
powerset <- function(items) {
len = length(items)
l = vector(mode = "list", length = 2 ^ len)
l[[1]] = numeric()
counter = 1L
for (x in 1L:length(items)) {
for (subset in 1L:counter) {
counter = counter + 1L
l[[counter]] = c(l[[subset]], items[x])
}
}
return(l)
}
brute_force_knapsack <- function(x, W) {
stopifnot(is.data.frame(x),
# is.numeric(x),
x > 0,
length(W) == 1,
is.numeric(W),
W > 0)
# initiate variables
n <- nrow(x)
best_v <- 0
chosen_items <- c()
items <- 1:n
sets <- powerset(items)
# loop through all possible sets (ommit empty set)
for (i in 2:length(sets)) {
c_sets <- unlist(sets[i])
set_w <- 0
set_v <- 0
j <- 1
# loop through the elements in the set
while (j <= length(c_sets) && set_w <= W) {
row <- c_sets[j]
set_w <- set_w + x[row, 1]
set_v <- set_v + x[row, 2]
j <- j + 1
}
# compare the value of this set to the previous best value
if (set_v > best_v && set_w <= W) {
best_v <- round(set_v,0)
chosen_items <- c_sets
}
}
result <- list(value = round(best_v,2), elements = chosen_items)
return(result)
}
devtools::test()
?proc.time
