max_value <- max(sum_v[which(sum_w < w)])
max_weight <- max(sum_w[which(sum_w < w)])
elements <- selection[sum_v == max_value & sum_w == max_weight]
elements
selection
which(sum_v == max_value)
which(sum_w == max_weight)
elements <- selection[which(sum_v == max_value) & which(sum_w == max_weight)]
elements
which(sum_w == max_weight)
max_weight
df <- data.frame(selection, sum_w, sum_v) %>%
filter(sum_w <= w) %>%
arrange(desc(sum_v))
View(df)
elements <- selection[which(sum_v == max_value) & sum_w <= w]
elements
which(sum_v == max_value)
elements <- selection[which(sum_v == max_value) && sum_w <= w]
return(list(max_value = max_value,
max_weight = max_weight,
element = elements))
brute_force_knapsack <- function(x, w, parallel = FALSE){
selection <- unlist(lapply(1:nrow(x), FUN = function(y){
combn(rownames(x), y, paste, collapse = " ")
}))
sum_w <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "w"], y, sum))
}
))
sum_v <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "v"], y, sum))
}
))
df <- data.frame(selection, sum_w, sum_v) %>%
filter(sum_w <= w) %>%
arrange(desc(sum_v))
max_value <- max(sum_v[which(sum_w < w)])
max_weight <- max(sum_w[which(sum_w < w)])
elements <- selection[which(sum_v == max_value) && sum_w <= w]
return(list(max_value = max_value,
max_weight = max_weight,
element = elements))
}
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500)
elements
elements <- selection[which(sum_v == max_value) && sum_w <= w]
selection[which(sum_v == max_value) && sum_w <= w]
which(sum_v == max_value)
elements <- selection[which(sum_v == max_value && sum_w <= w)]
elements
elements <- selection[which(sum_v == max_value & sum_w <= w)]
return(list(max_value = max_value,
max_weight = max_weight,
element = elements))
brute_force_knapsack <- function(x, w, parallel = FALSE){
selection <- unlist(lapply(1:nrow(x), FUN = function(y){
combn(rownames(x), y, paste, collapse = " ")
}))
sum_w <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "w"], y, sum))
}
))
sum_v <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "v"], y, sum))
}
))
df <- data.frame(selection, sum_w, sum_v) %>%
filter(sum_w <= w) %>%
arrange(desc(sum_v))
max_value <- max(sum_v[which(sum_w < w)])
max_weight <- max(sum_w[which(sum_w < w)])
elements <- selection[which(sum_v == max_value & sum_w <= w)]
return(list(max_value = max_value,
max_weight = max_weight,
element = elements))
}
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500)
brute_force_knapsack <- function(x, W, parallel = FALSE) {
stopifnot(is.data.frame(x),
apply(x, c(1, 2), is.numeric),
is.numeric(W))
stopifnot(x > 0,
length(W) == 1,
W > 0,
is.logical(parallel))
if (parallel == FALSE) {
# initiate variables
n <- nrow(x)
best_v <- 0
chosen_items <- c()
items <- 1:n
sets <- powerset(items)
# loop through all possible sets (ommit empty set)
for (i in 2:length(sets)) {
c_sets <- unlist(sets[i])
set_w <- 0
set_v <- 0
j <- 1
# loop through the elements in the set
while (j <= length(c_sets) && set_w <= W) {
row <- c_sets[j]
set_w <- set_w + x[row, 1]
set_v <- set_v + x[row, 2]
j <- j + 1
}
# compare the value of this set to the previous best value
if (set_v > best_v && set_w <= W) {
best_v <- round(set_v, 0)
chosen_items <- c_sets
}
}
result <- list(value = round(best_v, 2), elements = chosen_items)
return(result)
} else{
selection <- unlist(lapply(1:nrow(x), FUN = function(y) {
combn(rownames(x), y, paste, collapse = " ")
}
))
sum_w <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "w"], y, sum))
}
))
sum_v <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "v"], y, sum))
}
))
max_value <- max(sum_v[which(sum_w < w)])
max_weight <- max(sum_w[which(sum_w < w)])
elements <- selection[which(sum_v == max_value & sum_w <= w)]
return(list(
max_value = max_value,
max_weight = max_weight,
element = elements
))
}
}
# Data --------------------------------------------------------------------
set.seed(42)
n <- 2000
knapsack_objects <-
data.frame(
w=sample(1:4000, size = n, replace = TRUE),
v=runif(n = n, 0, 10000)
)
powerset <- function(items) {
len = length(items)
l = vector(mode = "list", length = 2 ^ len)
l[[1]] = numeric()
counter = 1L
for (x in 1L:length(items)) {
for (subset in 1L:counter) {
counter = counter + 1L
l[[counter]] = c(l[[subset]], items[x])
}
}
return(l)
}
brute_force_knapsack <- function(x, W, parallel = FALSE) {
stopifnot(is.data.frame(x),
apply(x, c(1, 2), is.numeric),
is.numeric(W))
stopifnot(x > 0,
length(W) == 1,
W > 0,
is.logical(parallel))
if (parallel == FALSE) {
# initiate variables
n <- nrow(x)
best_v <- 0
chosen_items <- c()
items <- 1:n
sets <- powerset(items)
# loop through all possible sets (ommit empty set)
for (i in 2:length(sets)) {
c_sets <- unlist(sets[i])
set_w <- 0
set_v <- 0
j <- 1
# loop through the elements in the set
while (j <= length(c_sets) && set_w <= W) {
row <- c_sets[j]
set_w <- set_w + x[row, 1]
set_v <- set_v + x[row, 2]
j <- j + 1
}
# compare the value of this set to the previous best value
if (set_v > best_v && set_w <= W) {
best_v <- round(set_v, 0)
chosen_items <- c_sets
}
}
result <- list(value = round(best_v, 2), elements = chosen_items)
return(result)
} else{
selection <- unlist(lapply(1:nrow(x), FUN = function(y) {
combn(rownames(x), y, paste, collapse = " ")
}
))
sum_w <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "w"], y, sum))
}
))
sum_v <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "v"], y, sum))
}
))
max_value <- max(sum_v[which(sum_w < w)])
max_weight <- max(sum_w[which(sum_w < w)])
elements <- selection[which(sum_v == max_value & sum_w <= w)]
return(list(
max_value = max_value,
max_weight = max_weight,
element = elements
))
}
}
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = FALSE)
brute_force_knapsack <- function(x, w, parallel = FALSE) {
stopifnot(is.data.frame(x),
apply(x, c(1, 2), is.numeric),
is.numeric(w))
stopifnot(x > 0,
length(w) == 1,
w > 0,
is.logical(parallel))
if (parallel == FALSE) {
# initiate variables
n <- nrow(x)
best_v <- 0
chosen_items <- c()
items <- 1:n
sets <- powerset(items)
# loop through all possible sets (ommit empty set)
for (i in 2:length(sets)) {
c_sets <- unlist(sets[i])
set_w <- 0
set_v <- 0
j <- 1
# loop through the elements in the set
while (j <= length(c_sets) && set_w <= w) {
row <- c_sets[j]
set_w <- set_w + x[row, 1]
set_v <- set_v + x[row, 2]
j <- j + 1
}
# compare the value of this set to the previous best value
if (set_v > best_v && set_w <= w) {
best_v <- round(set_v, 0)
chosen_items <- c_sets
}
}
result <- list(value = round(best_v, 2), elements = chosen_items)
return(result)
} else{
selection <- unlist(lapply(1:nrow(x), FUN = function(y) {
combn(rownames(x), y, paste, collapse = " ")
}
))
sum_w <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "w"], y, sum))
}
))
sum_v <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "v"], y, sum))
}
))
max_value <- max(sum_v[which(sum_w < w)])
max_weight <- max(sum_w[which(sum_w < w)])
elements <- selection[which(sum_v == max_value & sum_w <= w)]
return(list(
max_value = max_value,
max_weight = max_weight,
element = elements
))
}
}
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = FALSE)
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = TRUE)
cores <- parallel::detectCores()
cores
selection <- unlist(mclapply(1:nrow(x), FUN = function(y) {
combn(rownames(x), y, paste, collapse = " ")
}, mc.cores = cores
))
brute_force_knapsack <- function(x, w, parallel = FALSE) {
stopifnot(is.data.frame(x),
apply(x, c(1, 2), is.numeric),
is.numeric(w))
stopifnot(x > 0,
length(w) == 1,
w > 0,
is.logical(parallel))
if (parallel == FALSE) {
# initiate variables
n <- nrow(x)
best_v <- 0
chosen_items <- c()
items <- 1:n
sets <- powerset(items)
# loop through all possible sets (ommit empty set)
for (i in 2:length(sets)) {
c_sets <- unlist(sets[i])
set_w <- 0
set_v <- 0
j <- 1
# loop through the elements in the set
while (j <= length(c_sets) && set_w <= w) {
row <- c_sets[j]
set_w <- set_w + x[row, 1]
set_v <- set_v + x[row, 2]
j <- j + 1
}
# compare the value of this set to the previous best value
if (set_v > best_v && set_w <= w) {
best_v <- round(set_v, 0)
chosen_items <- c_sets
}
}
result <- list(value = round(best_v, 2), elements = chosen_items)
return(result)
} else{
cores <- parallel::detectCores()
cores
selection <- unlist(mclapply(1:nrow(x), FUN = function(y) {
combn(rownames(x), y, paste, collapse = " ")
}, mc.cores = cores
))
sum_w <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "w"], y, sum))
}
))
sum_v <- unlist(lapply(1:nrow(x), FUN = function(y) {
(combn(x[, "v"], y, sum))
}
))
max_value <- max(sum_v[which(sum_w < w)])
max_weight <- max(sum_w[which(sum_w < w)])
elements <- selection[which(sum_v == max_value & sum_w <= w)]
return(list(
value = max_value,
weight = max_weight,
element = elements
))
}
}
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = TRUE)
brute_force_knapsack <- function(x, w, parallel = FALSE) {
stopifnot(is.data.frame(x),
apply(x, c(1, 2), is.numeric),
is.numeric(w))
stopifnot(x > 0,
length(w) == 1,
w > 0,
is.logical(parallel))
if (parallel == FALSE) {
# initiate variables
n <- nrow(x)
best_v <- 0
chosen_items <- c()
items <- 1:n
sets <- powerset(items)
# loop through all possible sets (ommit empty set)
for (i in 2:length(sets)) {
c_sets <- unlist(sets[i])
set_w <- 0
set_v <- 0
j <- 1
# loop through the elements in the set
while (j <= length(c_sets) && set_w <= w) {
row <- c_sets[j]
set_w <- set_w + x[row, 1]
set_v <- set_v + x[row, 2]
j <- j + 1
}
# compare the value of this set to the previous best value
if (set_v > best_v && set_w <= w) {
best_v <- round(set_v, 0)
chosen_items <- c_sets
}
}
result <- list(value = round(best_v, 2), elements = chosen_items)
return(result)
} else{
cores <- parallel::detectCores()
cores
selection <- unlist(mclapply(1:nrow(x), FUN = function(y) {
combn(rownames(x), y, paste, collapse = " ")
}, mc.cores = cores
))
sum_w <- unlist(mclapply(1:nrow(x), FUN = function(y) {
(combn(x[, "w"], y, sum))
}, mc.cores = cores
))
sum_v <- unlist(mclapply(1:nrow(x), FUN = function(y) {
(combn(x[, "v"], y, sum))
}, , mc.cores = cores
))
max_value <- max(sum_v[which(sum_w < w)])
max_weight <- max(sum_w[which(sum_w < w)])
elements <- selection[which(sum_v == max_value & sum_w <= w)]
return(list(
value = max_value,
weight = max_weight,
element = elements
))
}
}
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = FALSE)
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = TRUE)
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = FALSE)
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = TRUE)
euclidian <- function(a, b){
while(b != 0){
r <- b
b <- a %% b
a <- r
}
a
}
a <- 1:1000
res <- lapply(a, euclidian, b=33)
print(unlist(res))
cores <- parallel::detectCores()
cores
sum_w <- unlist(mclapply(1:nrow(x), FUN = function(y) {
(combn(x[, "w"], y, sum))
}, mc.cores = cores
))
x = knapsack_objects[1:8,]
w = 3500
sum_w <- unlist(mclapply(1:nrow(x), FUN = function(y) {
(combn(x[, "w"], y, sum))
}, mc.cores = cores
))
brute_force_knapsack <- function(x, w, parallel = FALSE) {
stopifnot(is.data.frame(x),
apply(x, c(1, 2), is.numeric),
is.numeric(w))
stopifnot(x > 0,
length(w) == 1,
w > 0,
is.logical(parallel))
if (parallel == FALSE) {
# initiate variables
n <- nrow(x)
best_v <- 0
chosen_items <- c()
items <- 1:n
sets <- powerset(items)
# loop through all possible sets (ommit empty set)
for (i in 2:length(sets)) {
c_sets <- unlist(sets[i])
set_w <- 0
set_v <- 0
j <- 1
# loop through the elements in the set
while (j <= length(c_sets) && set_w <= w) {
row <- c_sets[j]
set_w <- set_w + x[row, 1]
set_v <- set_v + x[row, 2]
j <- j + 1
}
# compare the value of this set to the previous best value
if (set_v > best_v && set_w <= w) {
best_v <- round(set_v, 0)
chosen_items <- c_sets
}
}
result <- list(value = round(best_v, 2), elements = chosen_items)
return(result)
} else{
cores <- parallel::detectCores()
cores
selection <- unlist(mclapply(1:nrow(x), FUN = function(y) {
combn(rownames(x), y, paste, collapse = " ")
}, mc.cores = cores
))
sum_w <- unlist(mclapply(1:nrow(x), FUN = function(y) {
(combn(x[, "w"], y, sum))
}, mc.cores = cores
))
sum_v <- unlist(mclapply(1:nrow(x), FUN = function(y) {
(combn(x[, "v"], y, sum))
}, mc.cores = cores
))
max_value <- max(sum_v[which(sum_w < w)])
max_weight <- max(sum_w[which(sum_w < w)])
elements <- selection[which(sum_v == max_value & sum_w <= w)]
return(list(
value = max_value,
weight = max_weight,
element = elements
))
}
}
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = FALSE)
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = TRUE)
brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = TRUE)
system.time(brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = FALSE))
system.time(brute_force_knapsack(x = knapsack_objects[1:8,], w = 3500, parallel = TRUE))
system.time(brute_force_knapsack(x = knapsack_objects[1:12,], w = 3500, parallel = FALSE))
system.time(brute_force_knapsack(x = knapsack_objects[1:12,], w = 3500, parallel = TRUE))
system.time(brute_force_knapsack(x = knapsack_objects[1:20,], w = 3500, parallel = FALSE))
system.time(brute_force_knapsack(x = knapsack_objects[1:15,], w = 3500, parallel = FALSE))
system.time(brute_force_knapsack(x = knapsack_objects[1:15,], w = 3500, parallel = TRUE))
system.time(brute_force_knapsack(x = knapsack_objects[1:17,], w = 3500, parallel = FALSE))
system.time(brute_force_knapsack(x = knapsack_objects[1:17,], w = 3500, parallel = TRUE))
system.time(brute_force_knapsack(x = knapsack_objects[1:18,], w = 3500, parallel = FALSE))
system.time(brute_force_knapsack(x = knapsack_objects[1:18,], w = 3500, parallel = TRUE))
system.time(brute_force_knapsack(x = knapsack_objects[1:19,], w = 3500, parallel = FALSE))
system.time(brute_force_knapsack(x = knapsack_objects[1:19,], w = 3500, parallel = TRUE))
